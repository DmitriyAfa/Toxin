mixin button(props={})
  -
    const {
      variant="",
      type="",
      size="smallest",
      disabled=false,
      visability=true,
      name="",
      isSimple=false,
      hasArrow=false,
      hovered=false,
    } = props

    const mathVariants = ['minus', 'plus']
    const mainBorderedCLasses = variant === 'main-bordered' ? 'button_variant_main button_variant_main-bordered' : ''
    const buttonVariants = ['arrow-right', 'arrow-right_primary', 'expand', ...mathVariants, 'main', 'simple',]
    const hasArrowClass = hasArrow && 'button_variant button_variant_arrow-right'
    function isMathVariant (variants, variant) {
      return variants.includes(variant)
    }
    function makeVariantClass(variant) {
      if(isMathVariant(mathVariants, variant)) {
        return `button_variant_math button_variant_math-${variant} js-button_variant_math-${variant}`
      }

      return buttonVariants.includes(variant) && `button_variant button_variant_${variant} js-button_variant_${variant}`
    }
    const variantClass = makeVariantClass(variant)

    const sizes = ['smallest', 'small', 'medium', 'biggest',]
    const sizeClass = sizes.includes(size) && `button_size_${size}`

    const mathDisabledClass = disabled && isMathVariant(mathVariants, variant) && 'button_variant_math_disabled' 

    const visabilityClass = !visability && 'button_visability_hidden'
    const hoveredClass= hovered && 'button_hovered'

  button&attributes({
    class: [
      "button",
      'js-button',
      sizeClass,
      variantClass,
      mathDisabledClass,
      visabilityClass,
      mainBorderedCLasses,
      hasArrowClass,
      hoveredClass,
    ],
    type: type,
    'data-name': name,
  })
    block

